import appReducer from './reducer'
import { ACTIONS, AppAction } from './actions'
import AppState from './state';

describe('store/reducer', () => {
    const testData: [[ AppState, AppAction, AppState ]] = [
        [
            {
                sounds: {
                    foo: {
                        id: 'foo',
                        name: 'Foo',
                        path: 'sounds/foo.mp3',
                    },
                },
                tags: {},
            },
            {
                type: ACTIONS.PLAY_SOUND,
                payload: {
                    soundId: 'foo',
                },
            },
            {
                sounds: {
                    foo: {
                        id: 'foo',
                        name: 'Foo',
                        path: 'sounds/foo.mp3',
                        isPlaying: true,
                        isLoading: false,
                    },
                },
                tags: {},
            },
        ],
        [
            {
                sounds: {
                    foo: {
                        id: 'foo',
                        name: 'Foo',
                        path: 'sounds/foo.mp3',
                    },
                },
                tags: {},
            },
            {
                type: ACTIONS.STOP_SOUND,
                payload: {
                    soundId: 'foo',
                },
            },
            {
                sounds: {
                    foo: {
                        id: 'foo',
                        name: 'Foo',
                        path: 'sounds/foo.mp3',
                        isPlaying: false,
                        isLoading: false,
                    },
                },
                tags: {},
            },
        ],
        [
            {
                sounds: {},
                tags: {},
            },
            {
                type: ACTIONS.LOAD_SOUNDS,
                payload: {
                    sounds: {
                        foo: {
                            id: 'foo',
                            name: 'Foo',
                            path: 'sounds/foo.mp3',
                        },
                    },                          
                },
            },
            {
                sounds: {
                    foo: {
                        id: 'foo',
                        name: 'Foo',
                        path: 'sounds/foo.mp3',
                    },
                },
                tags: {},
            },
        ],
        [
            {
                sounds: {},
                tags: {},
            },
            {
                type: ACTIONS.LOAD_TAGS,
                payload: {
                    tags: {
                        bar: {
                            id: 'bar',
                            name: 'Bar',
                            slug: 'bar',
                        },
                    },
                },
            },
            {
                sounds: {},
                tags: {
                    bar: {
                        id: 'bar',
                        name: 'Bar',
                        slug: 'bar',
                    },
                },
            },
        ],
    ]



    testData.forEach(([state, action, expected]) => {
        it(`should return correct state while dispatching action: ${action.type}`, () => {
            const result: AppState = appReducer(state, action)
    
            expect(result).toEqual(expected)
        })
    })
})